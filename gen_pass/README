############################################
#-------- ОПИСАНИЕ ГЕНЕРАТОРА ПАРОЛЯ -------
############################################

#-------- УСТАНОВКА ------------------------

Для работы генератора пароля необходимо наличие
python2.7(из-за модуля argparse) в стандартной 
комплектации.

#-------- ИПОЛЬЗОВАНИЕ ---------------------

Краткая инструкция программиста по генератору
паролей. 

Пример использования:

>>> import genpassword
>>> p = genpassword
>>> ls = p.read_file('Italian.dic')
>>> dict_pass = p.dict_pass_rules(ls)
>>> p.gen_password_with_none(dict_pass, 10)
'sartertlen'
>>> 

Описание фукнций:

read_file(source_file) 
--------------------------------------------------
Загружает текст из файла и возвращает список строк.
В качестве аргумента принимает путь до файла на 
жестком диске

save_dict_in_file(dict_json, name_file)
--------------------------------------------------
Сохраняет сгенерированный словарь правил на жесткий 
диск. В качестве аргументов принимает словарь и имя 
файла, в который словарь будет сохранен.

get_dict_from_file(name_file)
--------------------------------------------------
Читает словарь правил из файла. В качестве 
аргумента принимает имя файла на жесктом диске, 
где хранится словарь.

gen_dict_except_smb(liststring)
--------------------------------------------------
Генерирует словарь, который подсчитывает, как часто
встречается тот или иной символ в тексте. 
Используется в функции dict_pass_rules(liststring)
на тот случай, если комбинаци, описанные в словаре из
функции gen_dict_all_on_one(liststring, max_value=2.5) не будет 
ни одного вхождения.
Эта функция имеет высокую актуальность при генерации пароля,
если исходный текст был небольшого размера. 
В качестве аргумента принимает список строк.

gen_dict_all_on_one(liststring, max_value=2.5)
--------------------------------------------------
генерирует основной словарь комбинаций. Каждый новый пароль
начинает генерироваться с символов NONENONE. Словарь имеет вид
{ ab:{c:2, k:7}, NONEc:{d:3}, NONENONE:{s:8, t:9} }

random_element(dictionary)
--------------------------------------------------
Возвращает случайный ключ из словаря на основании
его веса, указанного в значении элемента словаря. 
Чем больше вес ключа, тем больше вероятность, что будет
возвращен именно этот ключ.
Принимает в качестве аргумента словарь вида {'a':1, 'm':2}

gen_password_with_none(main_dict, lenth_pass)
--------------------------------------------------
Возвращает пароль, сгенерированный на основании правил из 
словаря после анализа текста. В качестве аргументов
принимает словарь, сгенерированный фунукцией 
dict_pass_rules(liststring), а также длину будущего пароля.

dict_pass_rules(liststring)
--------------------------------------------------
Собирает в один словарь результаты работы функций:
gen_dict_one_smb(liststring)
gen_dict_except_smb(liststring)
и возвращает словарь, подготовленный для работы с
функцией dict_pass_rules(liststring).
В качестве аргумента принимает список строк. 

test_dictionary(num_pass, dictionary, file_pass, lenth_pass)
--------------------------------------------------
Функция пишет в файл заданное количество паролей. Работает все 
это дело довольно быстро, можете смело генерировать несколько 
сот тысяч паролей. 

info_passwords(name_file, num_last_password)
--------------------------------------------------
сообщяет информацию о сгенерированных паролях с помощью функции
test_dictionary(num_pass, dictionary, file_pass, lenth_pass):
1. Сколько их было сгенерировано в файл
2. Выводит заданное количество набиболее частовстречающихся паролей
в заданном количестве в порядке возрастания.

Краткую инструкцию по использованию утилиты gen-pass вы
можете увидеть, введя команду:

$ gen-pass.py -h
